datos_kmeans <- bind_rows(datos_simulados1, datos_simulados_2)
agrupacion <- kmeans(datos_kmeans[, -4], 2)
centroides <- append(centroides, agrupacion$centers)
grupos_predichos <- factor(agrupacion$cluster)
levels(grupos_predichos) <-   if (grupos_predichos[1] == 1) {
c('G1','G2')
} else {
c('G2', 'G1')
}
accuracy <- (datos_kmeans$grupo == grupos_predichos) %>% mean()
acc <- append(acc, accuracy)
}
acc_mean <- append(acc_mean, mean(acc))
centroides %>% data.frame()
acc_mean <- append(acc_mean, mean(acc)) # vemos que el accuracy se reduce significativamente
agrupacion
agrupacion$centers
accuracy <- (datos_kmeans$grupo == grupos_predichos)
(datos_kmeans$grupo == grupos_predichos)
(datos_kmeans$grupo == grupos_predichos) %>% mean()
library(class)
X_train <- matrix(runif(150), ncol = 3)
y_train <- sample(1:3, 50, replace = TRUE)
X_test <- matrix(runif(75), ncol = 3)
# Perform KNN classification
k <- 3  # Number of neighbors
predicted_labels <- knn(train = X_train, test = X_test, cl = y_train, k = k)
# View predicted labels
print(predicted_labels)
transformation(X_test, 'norm')
transformation <- function(x, type) {
if (type == 'norm') {
return((x - mean(x))/sd(x))
}
if (type == 'estd') {
return((x - min(x))/(max(x) - min(x)))
}
}
transformation(X_test, 'norm')
# View predicted labels
print(predicted_labels)
library(class)
datos <- iris
p <- nrow(iris)*10/100
sample(1:nrow(iris),p)
split_data <- function(data, percentage) {
n <- round(nrow(iris)*percentage)
aleatorios <-sample(1:nrow(data), n)
test <- iris[aleatorios, ]
train <- iris[-aleatorios, ]
return(list(test = test,
train = train))
}
db_split <- split_data(iris, 0.1)
test <- db_split$test
train <- db_split$train
test
train
iris
transformation(predicted, 'norm')
datos <- iris
p <- nrow(iris)*10/100
sample(1:nrow(iris),p)
split_data <- function(data, percentage) {
n <- round(nrow(iris)*percentage)
aleatorios <-sample(1:nrow(data), n)
test <- iris[aleatorios, ]
train <- iris[-aleatorios, ]
return(list(test = test,
train = train))
}
db_split <- split_data(iris, 0.1)
test <- db_split$test
train <- db_split$train
predicted <- knn(train[, -5],
test[, -5],
train[, 5],
k = 2)
accuracy <- mean(predicted == test$Species)
transformation <- function(x, type) {
if (type == 'norm') {
return((x - mean(x))/sd(x))
}
if (type == 'estd') {
return((x - min(x))/(max(x) - min(x)))
}
}
transformation(predicted, 'norm')
install.packages("FactoMineR")
library('FactorClass')
install.packages("FactoClass")
library('FactoClass')
library('FactoMineR')
library('ade4')
library('dplyr')
library('ggplot2')
data('cafe')
View(cafe)
View(cafe)
library('aplpack')
install.packages("aplpack")
library('aplpack')
faces(cafe)
library('aplpack')
library('aplpack')
faces('cafe')
library('FactoClass')
library('FactoMineR')
library('ade4')
library('dplyr')
library('ggplot2')
library('aplpack')
data('cafe')
faces('cafe')
library('aplpack')
data("cafe")
faces(cafe, fill = FALSE)
cor(cafe)
pca <- PCA(cafe)
pca$eig
plot(pca$eig[,1], pch = 20, type = 'b')
pca$var$cor
plot(pca)
pca$var$cor
plot(pca)
pca$var$cor[1]
pca$var$cor[2]
pca$var$cor[2,1]
pca$var$cor
class(pca$var$cor)
pca$var$cor[:]
pca$var$cor[0]
pca$var$cor[1]
pca$var$cor[1,1]
cont <- pca$var$contrib
apply(cont, 2, sum)
plot(pca)
pca$var$contrib
pca$ind$contrib
pca <- PCA(cafe, ncp = 3)
pca$ind$coord # valores de las proyecciones ortogonales
pca$ind$coord # valores de las proyecciones ortogonales
distancias <- dist(pca$ind$coord) # calculamos las distancias
arbol <- hclust(distancias)
plot(arbol)
pca$ind$coord # valores de las proyecciones ortogonales
distancias <- dist(pca$ind$coord) # calculamos las distancias
arbol <- hclust(distancias)
plot(arbol)
grupos <- cutree(arbol, 3)
indices <- pca$ind$coord %>% data.frame()
indices[, 'grupo'] <- factor(grupos)
ggplot(data = indices, aes(x = Dim.1, y= Dim.2, color = grupo)) +
geom_point()
ggplot(data = indices, aes(x = Dim.1, y= Dim.2, color = grupo)) +
geom_point()
grupos2 <- kmeans(indices, 3)
indices[, 'grupos2'] <- factor(grupos2$clulster)
ggplot(data = indices, aes(x = Dim.1, y= Dim.2, color = grupos2)) +
geom_point()
rlang::last_trace()
pca$ind$coord # valores de las proyecciones ortogonales
distancias <- dist(pca$ind$coord) # calculamos las distancias
arbol <- hclust(distancias)
plot(arbol)
grupos <- cutree(arbol, 3)
indices <- pca$ind$coord %>% data.frame()
indices[, 'grupo'] <- factor(grupos)
ggplot(data = indices, aes(x = Dim.1, y= Dim.2, color = grupo)) +
geom_point()
grupos2 <- kmeans(indices, 3)
indices[, 'grupos2'] <- factor(grupos2$clulster)
ggplot(data = indices, aes(x = Dim.1, y= Dim.2, color = grupos2)) +
geom_point()
indices[, 'grupos2'] <- factor(grupos2$cluster)
ggplot(data = indices, aes(x = Dim.1, y= Dim.2, color = grupos2)) +
geom_point()
library(ClustOfVar)
install.packages("ClustOfVar")
rm(list = ls())
library(ClustOfVar)
library(FactoMineR)
data("dogs")
ggplot(dogs, aes(x = Affectivity, y = Aggressiveness))
library(ggplot2)
data("dogs")
ggplot(dogs, aes(x = Affectivity, y = Aggressiveness))
View(dogs)
ggplot(dogs, aes(x = Affectivity, y = Aggressivness))
ggplot(dogs, aes(x = Affectivity, fill = Aggressivness)) +
geom_bar(position = "dodge")
ggplot(dogs, aes(x = Function, fill = Aggressivness)) +
geom_bar(position = "dodge")
ggplot(dogs, aes(x = Intelligence, fill = Aggressivness)) +
geom_bar(position = "dodge")
ggplot(dogs, aes(x = Intelligence, fill = Weight)) +
geom_bar(position = "dodge")
acm_dogs <- MCA(dogs)
acm_dogs$eig
acm_dogs$var$contrib
plot(acm_dogs)
dist_dogs <- dist(acm_dogs$var$coord)
arbol_perros <- hclust(dist_dogs)
plot(arbol_perros)
# Load the data
data <- read_csv("../input/verdes.csv")
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(corrplot)
setwd("/Users/ctejada/Desktop/AED/proyecto/src/")
data <- read_csv("../input/verdes.csv")
# Clean up the column names
names(data) <- gsub("\\n|\\s+", "", names(data))
# Check for missing values
missing_values <- colSums(is.na(data))
print(missing_values)
# Display the first few rows of the data
head(data)
# Summary statistics for numerical columns
summary(data)
# Summary statistics for categorical columns
data %>%
summarise_all(~n_distinct(.))
# Distribution by Region
ggplot(data, aes(x = factor(REGION))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Green Businesses by Region",
x = "Region",
y = "Number of Businesses")
# Distribution by Region
ggplot(data, aes(x = factor(REGIÓN))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Green Businesses by Region",
x = "Region",
y = "Number of Businesses")
View(data)
data <- data %>% rename(new_name = data$`REGIÓN(DondeseencuentraelNegocioVerde)`)
# Display the first few rows of the data
head(data)
data <- data %>% rename(REGION = data$`REGIÓN(DondeseencuentraelNegocioVerde)`)
data <- data %>% rename(REGION = `REGIÓN(DondeseencuentraelNegocioVerde)`)
# Display the first few rows of the data
head(data)
extract_uppercase <- function(name) {
paste(unlist(str_extract_all(name, "[A-Z]+")), collapse = " ")
}
names(data) <- sapply(names(data), extract_uppercase)
library(stringr)
extract_uppercase <- function(name) {
paste(unlist(str_extract_all(name, "[A-Z]+")), collapse = " ")
}
names(data) <- sapply(names(data), extract_uppercase)
print(names(data))
data <- read_csv("../input/verdes.csv")
# Clean up the column names
names(data) <- gsub("\\n|\\s+", "", names(data))
# Check for missing values
missing_values <- colSums(is.na(data))
print(missing_values)
# Display the first few rows of the data
head(data)
# Summary statistics for numerical columns
summary(data)
# Summary statistics for categorical columns
data %>%
summarise_all(~n_distinct(.))
data <- data %>% rename(REGION = `REGIÓN(DondeseencuentraelNegocioVerde)`)
extract_before_parentheses <- function(name) {
str_split(name, "\\(")[[1]][1] %>% str_trim()
}
names(data) <- sapply(names(data), extract_before_parentheses)
print(names(data))
# Distribution by Region
ggplot(data, aes(x = factor(REGIÓN))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Green Businesses by Region",
x = "Region",
y = "Number of Businesses")
# Distribution by Region
ggplot(data, aes(x = factor(REGION))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Green Businesses by Region",
x = "Region",
y = "Number of Businesses")
# Distribution by Category
ggplot(data, aes(x = factor(CATEGORIA))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Green Businesses by Category",
x = "Category",
y = "Number of Businesses")
# Distribution by Category
ggplot(data, aes(x = factor(CATEGORÍA))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Green Businesses by Category",
x = "Category",
y = "Number of Businesses")
# Distribution by Sector
ggplot(data, aes(x = factor(SECTOR))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Green Businesses by Sector",
x = "Sector",
y = "Number of Businesses")
# Convert year column to numeric
data$ANO <- as.numeric(data$ANO)
# Convert year column to numeric
data$ANO <- as.numeric(data$AÑO)
# Time Trend of Registrations
ggplot(data, aes(x = AÑO)) +
geom_line(stat = "count") +
geom_point(stat = "count") +
labs(title = "Time Trend of Green Business Registrations",
x = "Year",
y = "Number of Registrations")
# Trend of Top Categories
top_categories <- data %>%
group_by(CATEGORIA) %>%
summarise(count = n()) %>%
top_n(5, wt = count) %>%
pull(CATEGORIA)
# Trend of Top Categories
top_categories <- data %>%
group_by(CATEGORÍA) %>%
summarise(count = n()) %>%
top_n(5, wt = count) %>%
pull(CATEGORIA)
# Trend of Top Categories
top_categories <- data %>%
group_by(CATEGORÍA) %>%
summarise(count = n()) %>%
top_n(5, wt = count) %>%
pull(CATEGORÍA)
category_trend <- data %>%
filter(CATEGORÍA %in% top_categories) %>%
group_by(AÑO, CATEGORÍA) %>%
summarise(count = n()) %>%
spread(CATEGORÍA, count, fill = 0)
ggplot(category_trend, aes(x = ANO)) +
geom_line(aes(y = `1. Bienesyserviciossosteniblesprovenientesdelosrecursosnaturales`)) +
geom_line(aes(y = `2. EcoproductosIndustriales`)) +
geom_line(aes(y = `3. Mercado de Carbono`)) +
geom_line(aes(y = `4. Productos y servicios de Base Biológica`)) +
geom_line(aes(y = `5. Ecoturismo`)) +
labs(title = "Top Green Business Categories Over the Years",
x = "Year",
y = "Number of Registrations") +
theme(legend.position = "top")
original <- read_csv("../input/verdes.csv")
View(original)
ggplot(category_trend, aes(x = AÑO)) +
geom_line(aes(y = `1. Bienesyserviciossosteniblesprovenientesdelosrecursosnaturales`)) +
geom_line(aes(y = `2. EcoproductosIndustriales`)) +
geom_line(aes(y = `3. Mercado de Carbono`)) +
geom_line(aes(y = `4. Productos y servicios de Base Biológica`)) +
geom_line(aes(y = `5. Ecoturismo`)) +
labs(title = "Top Green Business Categories Over the Years",
x = "Year",
y = "Number of Registrations") +
theme(legend.position = "top")
ggplot(category_trend, aes(x = AÑO)) +
geom_line(aes(y = `1. Bienesys`)) +
geom_line(aes(y = `2. EcoproductosIndustriales`)) +
geom_line(aes(y = `3. Mercado de Carbono`)) +
geom_line(aes(y = `4. Productos y servicios de Base Biológica`)) +
geom_line(aes(y = `5. Ecoturismo`)) +
labs(title = "Top Green Business Categories Over the Years",
x = "Year",
y = "Number of Registrations") +
theme(legend.position = "top")
View(category_trend)
ggplot(category_trend, aes(x = AÑO)) +
geom_line(aes(y = `1. Bienes y servicios sostenibles provenientes de los recursos naturales`)) +
geom_line(aes(y = `2. EcoproductosIndustriales`)) +
geom_line(aes(y = `3. Mercado de Carbono`)) +
geom_line(aes(y = `4. Productos y servicios de Base Biológica`)) +
geom_line(aes(y = `5. Ecoturismo`)) +
labs(title = "Top Green Business Categories Over the Years",
x = "Year",
y = "Number of Registrations") +
theme(legend.position = "top")
ggplot(category_trend, aes(x = AÑO)) +
geom_line(aes(y = category_trend$`1. Bienes y servicios sostenibles provenientes de los Recursos Naturales`)) +
geom_line(aes(y = `2. EcoproductosIndustriales`)) +
geom_line(aes(y = `3. Mercado de Carbono`)) +
geom_line(aes(y = `4. Productos y servicios de Base Biológica`)) +
geom_line(aes(y = `5. Ecoturismo`)) +
labs(title = "Top Green Business Categories Over the Years",
x = "Year",
y = "Number of Registrations") +
theme(legend.position = "top")
ggplot(category_trend, aes(x = AÑO)) +
geom_line(aes(y = category_trend$`1. Bienes y servicios sostenibles provenientes de los Recursos Naturales`)) +
geom_line(aes(y = category_trend$`2. Ecoproductos Industriales`)) +
geom_line(aes(y = category_trend$`3. Mercados de Carbono`)) +
labs(title = "Top Green Business Categories Over the Years",
x = "Year",
y = "Number of Registrations") +
theme(legend.position = "top")
# Correlation analysis for numerical variables
correlation_matrix <- cor(data %>% select_if(is.numeric), use = "complete.obs")
# Plot the correlation matrix
corrplot(correlation_matrix, method = "color", addCoef.col = "black", tl.col = "black", number.cex = 0.7)
library(corrplot)
# Correlation analysis for numerical variables
correlation_matrix <- cor(data %>% select_if(is.numeric), use = "complete.obs")
# Plot the correlation matrix
corrplot(correlation_matrix, method = "color", addCoef.col = "black", tl.col = "black", number.cex = 0.7)
data$AÑO <- as.numeric(data$AÑO)
# Identify numerical columns
numerical_columns <- data %>% select_if(is.numeric)
# Calculate correlation matrix
correlation_matrix <- cor(numerical_columns, use = "complete.obs")
# Plot the correlation matrix
corrplot(correlation_matrix, method = "color", addCoef.col = "black", tl.col = "black", number.cex = 0.7)
# Calculate correlation matrix
correlation_matrix <- cor(numerical_columns, use = "complete.obs")
# Display the correlation matrix
print(correlation_matrix)
# Convert the correlation matrix to a long format
correlation_long <- as.data.frame(as.table(correlation_matrix))
# Plot the correlation matrix using ggplot2
ggplot(correlation_long, aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Matrix",
x = "Variables",
y = "Variables")
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
setwd("/Users/ctejada/Desktop/AED/proyecto/src/")
cancer_data <- read_csv("../input/food.csv")
View(cancer_data)
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
setwd("/Users/ctejada/Desktop/AED/proyecto/src/")
data <- read_csv("../input/food.csv")
# Select relevant columns
relevant_data <- data %>% select(rating, calories, protein, fat, sodium)
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
setwd("/Users/ctejada/Desktop/AED/proyecto/src/")
data <- read_csv("../input/food.csv")
# Select relevant columns
relevant_data <- data %>% select(rating, calories, protein, fat, sodium)
View(relevant_data)
# Display the first few rows of the dataset to understand its structure
head(relevant_data)
# Check for missing values
summary(relevant_data)
# Handle missing values by dropping rows with any missing values in the relevant columns
cleaned_data <- relevant_data %>% drop_na()
# Display the first few rows of the cleaned dataset
head(cleaned_data)
# Calculate correlation matrix
cor_matrix <- cor(cleaned_data)
# Print correlation matrix
print(cor_matrix)
# Visualize the relationships
pairs(cleaned_data, main = "Scatterplot Matrix")
# Additional visualization using ggplot2
ggplot(cleaned_data, aes(x = calories, y = rating)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Calories vs Rating")
ggplot(cleaned_data, aes(x = protein, y = rating)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Protein vs Rating")
ggplot(cleaned_data, aes(x = fat, y = rating)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Fat vs Rating")
ggplot(cleaned_data, aes(x = sodium, y = rating)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Sodium vs Rating")
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
setwd("/Users/ctejada/Desktop/AED/proyecto/src/")
# Leer el archivo CSV
data <- read.csv("../input/food.csv")
# Mostrar las primeras filas del dataframe
head(data)
# Generar estadísticas descriptivas iniciales
initial_stats <- summary(data)
# Visualizar la distribución de calorías
ggplot(data, aes(x = calories)) +
geom_histogram(binwidth = 50, fill = "blue", color = "black") +
scale_y_log10() +
labs(title = "Distribution of Calories", x = "Calories", y = "Frequency")
